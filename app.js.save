const express = require("express");
const session = require("express-session");
const passport = require("passport");
const cors = require("cors");
const dotenv = require("dotenv");
const connectDB = require("./config/db");
const path = require("path");

// Load environment variables
dotenv.config();

// Initialize Express
const app = express();

// Connect to MongoDB
connectDB();

// CORS Configuration
const allowedOrigins = [
  "https://lot6k75trbckgvlkcsfqicmqvvx23y62n3apcfdv4eeafblxjt7o6cyd.onion",
  "http://lot6k75trbckgvlkcsfqicmqvvx23y62n3apcfdv4eeafblxjt7o6cyd.onion",
  "https://casibom8870.com",
  "https://www.casibom8870.com",
  "https://oc0000ad.com",
  "https://www.oc0000ad.com",
  "https://xn--casiom820-jy5d.com",
  "https://pfoc0000ft.com",
  "https://pfoc0000fta.com",
  "https://www.pfoc0000ft.com",
  "https://www.pfoc0000fta.com",
  "http://localhost:5173", // local dev
  "http://localhost:5174",
  "http://localhost:5175",

];

// Log incoming origin for debugging
app.use((req, res, next) => {
  console.log("Request Origin:", req.headers.origin);
  next();
});

// Apply CORS middleware
app.use(
  cors({
    origin: function (origin, callback) {
      if (!origin || allowedOrigins.includes(origin)) {
        callback(null, true);
      } else {
        callback(new Error("Not allowed by CORS: " + origin));
      }
    },
    credentials: true, // Required for cookies/session
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization"]
  })
);

// Handle preflight OPTIONS requests
app.options("*", cors());

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Trust proxy (if behind nginx / Tor HiddenService)
app.set("trust proxy", 1);

// Session Configuration
app.use(
  session({
    secret: process.env.SESSION_SECRET || "default_secret",
    resave: false,
    saveUninitialized: false,
    cookie: {
      secure: process.env.NODE_ENV === "production" ? true : false, // Tor .onion is secure even over HTTP
      httpOnly: true,
      sameSite: "lax", // Can also use 'none' if needed
      maxAge: 1000 * 60 * 60 * 24 // 1 day
    }
  })
);

// Passport.js initialization
require("./config/passportConfig");
app.use(passport.initialize());
app.use(passport.session());

// Routes
app.use("/api/auth", require("./routes/authRoutes"));
app.use("/api/transactions", require("./routes/transactionRoutes"));
app.use("/api/user", require("./routes/userRoutes"));
app.use("/api/companyaccount", require("./routes/companyAccountRoutes"));
app.use("/api/winners", require("./routes/winnerRoutes"));
app.use("/uploads", express.static("uploads"));

// Root Route
app.get("/", (req, res) => {
  res.send("Welcome to the API!");
});

// Serve static files from React (if deployed)
app.use(express.static(path.join(__dirname, "public")));
app.get("*", (req, res) => {
  res.sendFile(path.resolve(__dirname, "public", "index.html"));
});

// Export the app (for use in server.js or testing)
module.exports = app;
